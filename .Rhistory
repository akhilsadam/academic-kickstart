X = 0.5*(data3$Mother + data3$Father)
Y = data3$Height
n = length(X)
p = 2 #slope and intercept
Xmat = matrix(c(rep(1,times=n),X),nrow=n,ncol=p)
#Statistical Distance:
xTL = c(65,76)
for(xT in xTL)
{
xi = c(1,xT)
D = t(xi)%*%inv(t(Xmat)%*%Xmat)%*%xi
CL = 0.95 #Confidence Level
alpha = 1-CL
tvalue = qt(1-alpha/2,n-p)
SE = RMSE*sqrt(1+D)
TSE=tvalue*SE
ypred<-predict(model, newdata=data.frame(X=xT))
cat('At',CL*100,'% confidence, the T-value is:',tvalue,'\n')
cat('The SE is',SE,'\n')
cat('The predicted height is',ypred,'\n')
cat('The prediction interval is (',ypred-TSE,',',ypred+TSE,').\n\n')
}
ypred<-predict(model, newdata=data.frame(X=xT))
data3 <- data2[which(data2$Gender=='male'),]
X = 0.5*(data3$Mother + data3$Father)
Y = data3$Height
n = length(X)
p = 2 #slope and intercept
Xmat = matrix(c(rep(1,times=n),X),nrow=n,ncol=p)
#Statistical Distance:
xTL = c(65,76)
for(xT in xTL)
{
xi = c(1,xT)
D = t(xi)%*%inv(t(Xmat)%*%Xmat)%*%xi
CL = 0.95 #Confidence Level
alpha = 1-CL
tvalue = qt(1-alpha/2,n-p)
SE = RMSE*sqrt(1+D)
TSE=tvalue*SE
ypred<-predict(model, newdata=data.frame(X=xT))
ypredI<-predict(model, newdata=data.frame(X=xT), interval="prediction")
cat('At',CL*100,'% confidence, the T-value is:',tvalue,'\n')
cat('The SE is',SE,'\n')
cat('The predicted height is',ypred,'\n')
cat('The (formula) prediction interval is (',ypred-TSE,',',ypred+TSE,').\n\n')
cat('The R prediction interval is ',ypredI,'.\n\n')
}
data3 <- data2[which(data2$Gender=='male'),]
X = 0.5*(data3$Mother + data3$Father)
Y = data3$Height
n = length(X)
p = 2 #slope and intercept
Xmat = matrix(c(rep(1,times=n),X),nrow=n,ncol=p)
#Statistical Distance:
xTL = c(65,76)
for(xT in xTL)
{
xi = c(1,xT)
D = t(xi)%*%inv(t(Xmat)%*%Xmat)%*%xi
CL = 0.95 #Confidence Level
alpha = 1-CL
tvalue = qt(1-alpha/2,n-p)
SE = RMSE*sqrt(1+D)
TSE=tvalue*SE
ypred<-predict(model, newdata=data.frame(X=xT))
ypredI<-predict(model, newdata=data.frame(X=xT), interval="prediction")
cat('At',CL*100,'% confidence, the T-value is:',tvalue,'\n')
cat('The SE is',SE,'\n')
cat('The predicted height is',ypred,'\n')
cat('The (formula) prediction interval is (',ypred-TSE,',',ypred+TSE,').\n\n')
cat('The R prediction interval is (',ypredI[2],',',ypredI[3],')','.\n\n')
}
data3 <- data2[which(data2$Gender=='male'),]
X = 0.5*(data3$Mother + data3$Father)
Y = data3$Height
n = length(X)
p = 2 #slope and intercept
Xmat = matrix(c(rep(1,times=n),X),nrow=n,ncol=p)
#Statistical Distance:
xTL = c(65,76)
for(xT in xTL)
{
xi = c(1,xT)
D = t(xi)%*%inv(t(Xmat)%*%Xmat)%*%xi
CL = 0.95 #Confidence Level
alpha = 1-CL
tvalue = qt(1-alpha/2,n-p)
SE = RMSE*sqrt(1+D)
TSE=tvalue*SE
ypred<-predict(model, newdata=data.frame(X=xT))
ypredI<-predict(model, newdata=data.frame(X=xT), interval="prediction")
cat('At',CL*100,'% confidence, the T-value is:',tvalue,'\n')
cat('The SE is',SE,'\n')
cat('The predicted height is',ypred,'\n')
cat('The (formula) prediction interval is (',ypred-TSE,',',ypred+TSE,').\n')
cat('The R prediction interval is (',ypredI[2],',',ypredI[3],')','.\n\n')
}
data3 <- data2[which(data2$Gender=='male'),]
X = 0.5*(data3$Mother + data3$Father)
Y = data3$Height
model = lm(Y~X)
n = length(X)
p = 2 #slope and intercept
Xmat = matrix(c(rep(1,times=n),X),nrow=n,ncol=p)
#Statistical Distance:
xTL = c(65,76)
for(xT in xTL)
{
xi = c(1,xT)
D = t(xi)%*%inv(t(Xmat)%*%Xmat)%*%xi
CL = 0.95 #Confidence Level
alpha = 1-CL
tvalue = qt(1-alpha/2,n-p)
SE = RMSE*sqrt(1+D)
TSE=tvalue*SE
ypred<-predict(model, newdata=data.frame(X=xT))
ypredI<-predict(model, newdata=data.frame(X=xT), interval="prediction")
cat('At',CL*100,'% confidence, the T-value is:',tvalue,'\n')
cat('The SE is',SE,'\n')
cat('The predicted height is',ypred,'\n')
cat('The (formula) prediction interval is (',ypred-TSE,',',ypred+TSE,').\n')
cat('The R prediction interval is (',ypredI[2],',',ypredI[3],')','.\n\n')
}
cat('Residual Plot for Child Height\n')
residuals(model0)
X = 0.5*(data2$Mother + data2$Father)
Y = data2$Height
cat('Child Height (Y) vs Parent Height (X)\n')
model0=lm(Y~X)
plot(X,Y)
abline(model0)
out=summary(model0)
out
cat('With 95% confidence, for an inch increase in average parent height, the child height increases about',out$coefficients[2,1],'+-',2*out$coefficients[2,2],'on average.\n')
RMSE=sqrt(sum(residuals(model)^2) / df.residual(model))
cat('Residual Plot for Child Height\n')
residuals(model0)
cat('Residual Plot for Male Child Height\n')
residuals(model)
plot(residuals(model0),main='Residual Plot for Child Height')
plot(residuals(model),main='Residual Plot for Male Child Height')
X0 = 0.5*(data2$Mother + data2$Father)
Y = data2$Height
cat('Child Height (Y) vs Parent Height (X)\n')
model0=lm(Y~X0)
plot(X0,Y)
abline(model0)
out=summary(model0)
out
cat('With 95% confidence, for an inch increase in average parent height, the child height increases about',out$coefficients[2,1],'+-',2*out$coefficients[2,2],'on average.\n')
RMSE=sqrt(sum(residuals(model)^2) / df.residual(model))
X0 = 0.5*(data2$Mother + data2$Father)
Y0 = data2$Height
cat('Child Height (Y) vs Parent Height (X)\n')
model0=lm(Y~X0)
plot(X0,Y0)
abline(model0)
out=summary(model0)
out
cat('With 95% confidence, for an inch increase in average parent height, the child height increases about',out$coefficients[2,1],'+-',2*out$coefficients[2,2],'on average.\n')
RMSE=sqrt(sum(residuals(model)^2) / df.residual(model))
plot(residuals(model0)~X0,main='Residual Plot for Child Height')
plot(residuals(model)~X,main='Residual Plot for Male Child Height')
data3 <- data2[which(data2$Gender=='male'),]
X = 0.5*(data3$Mother + data3$Father)
Y = data3$Height
model = lm(Y~X)
n = length(X)
p = 2 #slope and intercept
Xmat = matrix(c(rep(1,times=n),X),nrow=n,ncol=p)
#Statistical Distance:
xTL = c(65,76)
for(xT in xTL)
{
xi = c(1,xT)
D = t(xi)%*%inv(t(Xmat)%*%Xmat)%*%xi
CL = 0.95 #Confidence Level
alpha = 1-CL
tvalue = qt(1-alpha/2,n-p)
SE = RMSE*sqrt(1+D)
TSE=tvalue*SE
ypred<-predict(model, newdata=data.frame(X=xT))
ypredI<-predict(model, newdata=data.frame(X=xT), interval="prediction")
cat('At',CL*100,'% confidence, the T-value is:',tvalue,'\n')
cat('The SE is',SE,'\n')
cat('The predicted height is',ypred,'\n')
cat('The (formula) prediction interval is (',ypred-TSE,',',ypred+TSE,').\n')
cat('The R prediction interval is (',ypredI[2],',',ypredI[3],')','.\n\n')
}
plot(residuals(model0)~X0,main='Residual Plot for Child Height')
plot(residuals(model)~X,main='Residual Plot for Male Child Height')
plot(residuals(model0)~X0,main='Residual Plot for Child Height')
hist(residuals(model0),main='Residual Plot for Child Height')
plot(residuals(model)~X,main='Residual Plot for Male Child Height')
hist(residuals(model),main='Residual Plot for Male Child Height')
plot(residuals(model0)~X0,main='Residual Plot for Child Height')
plot(residuals(model0)~data2$Family,main='Residual Plot for Child Height Against Family')
hist(residuals(model0),main='Residual Plot for Child Height')
plot(residuals(model)~X,main='Residual Plot for Male Child Height')
plot(residuals(model0)~data3$Family,main='Residual Plot for Male Child Height Against Family')
plot(residuals(model0)~X0,main='Residual Plot for Child Height')
plot(residuals(model0)~data2$Family,main='Residual Plot for Child Height Against Family')
hist(residuals(model0),main='Residual Plot for Child Height')
plot(residuals(model)~X,main='Residual Plot for Male Child Height')
plot(residuals(model)~data3$Family,main='Residual Plot for Male Child Height Against Family')
hist(residuals(model),main='Residual Plot for Male Child Height')
knitr::opts_chunk$set(echo = TRUE)
require(matlib)
library(caTools)
library(caret)
install.packages('caret')
uninstall.packages('caret')
knitr::opts_chunk$set(echo = TRUE)
require(matlib)
library(caTools)
library(caret)
library(tidyverse)
install.packages(tidyverse)
install.packages('tidyverse')
knitr::opts_chunk$set(echo = TRUE)
require(matlib)
library(caTools)
library(caret)
library(tidyverse)
View(data2)
View(data2)
data2$Parent <- (data2$Mother + data2$Father)/2
set.seed(100)
splt = sample.split(data2$Height, SplitRatio = 0.7)
train = subset(data2, splt == TRUE)
test = subset(data2, splt == FALSE)
modelV = glm(Height~poly(Parent,i),data=train)
data2$Parent <- (data2$Mother + data2$Father)/2
set.seed(100)
splt = sample.split(data2$Height, SplitRatio = 0.7)
train = subset(data2, splt == TRUE)
test = subset(data2, splt == FALSE)
modelV = glm(Height~poly(Parent,3),data=train)
data2$Parent <- (data2$Mother + data2$Father)/2
set.seed(100)
splt = sample.split(data2$Height, SplitRatio = 0.7)
train = subset(data2, splt == TRUE)
test = subset(data2, splt == FALSE)
modelV = glm(Height~poly(Parent,3),data=train)
RMSE = RMSE(predict(modelV,test), test$Height)
data2$Parent <- (data2$Mother + data2$Father)/2
set.seed(100)
splt = sample.split(data2$Height, SplitRatio = 0.7)
train = subset(data2, splt == TRUE)
test = subset(data2, splt == FALSE)
modelV = glm(Height~poly(Parent,3),data=train)
RMSE = RMSE(predict(modelV,test), test$Height)
RMSE
set.seed(100)
splt = sample.split(data2$Height, SplitRatio = 0.7)
train = subset(data2, splt == TRUE)
test = subset(data2, splt == FALSE)
modelV = glm(Height~poly(Parent,3),data=train)
RMSE = RMSE(predict(modelV,test), test$Height)
cat('RMSE Validation Set:',RMSE,'\n\n')
set.seed(100)
splt = sample.split(data2$Height, SplitRatio = 0.7)
train = subset(data2, splt == TRUE)
test = subset(data2, splt == FALSE)
modelV = glm(Height~poly(Parent,3),data=train)
RMSE = RMSE(predict(modelV,test), test$Height)
cat('Validation Set RMSE:',RMSE,'\n\n')
library(boot)
data = data.frame(x,y)
for(u in 1:2)
{
set.seed(50*u)
for(i in 1:4)
{
model = glm(y~poly(x,i))
loocvERR = cv.glm(data,model)$delta
cat("Seed",50*u,"LOOCV error with polynomial fit of degree",i,":",c(loocvERR),"\n")
}
cat("\n")
}
library(boot)
data = data.frame(x,y)
for(u in 1:2)
{
set.seed(50*u)
for(i in 1:4)
{
model = glm(y~poly(x,i))
loocvERR = cv.glm(data,model,K=length(x))$delta
cat("Seed",50*u,"LOOCV error with polynomial fit of degree",i,":",c(loocvERR),"\n")
}
cat("\n")
}
library(boot)
data = data.frame(x,y)
for(u in 1:2)
{
set.seed(50*u)
for(i in 1:4)
{
model = glm(y~poly(x,i))
loocvERR = cv.glm(data,model,K=length(x))$delta
cat("Seed",50*u,"LOOCV error with polynomial fit of degree (raw, adjusted)",i,":",c(loocvERR),"\n")
}
cat("\n")
}
library(boot)
data = data.frame(x,y)
for(u in 1:2)
{
set.seed(50*u)
for(i in 1:4)
{
model = glm(y~poly(x,i))
loocvERR = cv.glm(data,model,K=length(x))$delta
cat("Seed",50*u,"LOOCV error with polynomial fit of degree ",i,"(raw, adjusted):",c(loocvERR),"\n")
}
cat("\n")
}
modelLCV = glm(Height~poly(Parent,3),data=data2)
loocvERR = cv.glm(data2,modelLCV,K=n)$delta
cat("Seed",seed,"LOOCV error with polynomial fit of degree 3 (raw, adjusted):",c(loocvERR),"\n")
seed=100
set.seed(seed)
splt = sample.split(data2$Height, SplitRatio = 0.7)
train = subset(data2, splt == TRUE)
test = subset(data2, splt == FALSE)
modelV = glm(Height~poly(Parent,3),data=train)
RMSE = RMSE(predict(modelV,test), test$Height)
cat('Validation Set RMSE:',RMSE,'\n\n')
modelLCV = glm(Height~poly(Parent,3),data=data2)
loocvERR = cv.glm(data2,modelLCV,K=n)$delta
cat("Seed",seed,"LOOCV error with polynomial fit of degree 3 (raw, adjusted):",c(loocvERR),"\n")
modelLCV = glm(Height~poly(Parent,3),data=data2)
loocvERR = cv.glm(data2,modelLCV)$delta
cat("Seed",seed,"LOOCV error with polynomial fit of degree 3 (raw, adjusted):",c(loocvERR),"\n")
modelLCV = glm(Height~poly(Parent,3),data=data2)
loocvERR = cv.glm(data2,modelLCV)$delta
cat("Seed",seed,"LOOCV error with polynomial fit of degree 3 (raw, adjusted):",c(loocvERR),"\n")
modelLCV = glm(Height~poly(Parent,3),data=data2)
loocvERR = cv.glm(data2,modelLCV,K=5)$delta
cat("Seed",seed,"LOOCV error with polynomial fit of degree 3 (raw, adjusted):",c(loocvERR),"\n")
modelLCV = glm(Height~poly(Parent,3),data=data2)
loocvERR = cv.glm(data2,modelLCV)$delta
cat("Seed",seed,"LOOCV error with polynomial fit of degree 3 (raw, adjusted):",c(loocvERR),"\n")
seed=100
set.seed(seed)
splt = sample.split(data2$Height, SplitRatio = 0.7)
train = subset(data2, splt == TRUE)
test = subset(data2, splt == FALSE)
modelV = glm(Height~poly(Parent,3),data=train)
RMSE = RMSE(predict(modelV,test), test$Height)
cat('Validation Set RMSE:',RMSE,'\n\n')
seed=100
set.seed(seed)
splt = sample.split(data2$Height, SplitRatio = 0.7)
train = subset(data2, splt == TRUE)
test = subset(data2, splt == FALSE)
modelV = glm(Height~poly(Parent,3),data=train)
RMSE = RMSE(predict(modelV,test), test$Height)
cat('Validation Set RMSE:',RMSE,'\n')
cat('RMSE On complete dataset:',RMSE(predict(modelV,data2), (data2$Height)),'\n\n')
modelLCV = glm(Height~poly(Parent,3),data=data2)
loocvERR = cv.glm(data2,modelLCV)$delta
cat("Seed",seed,"LOOCV error with polynomial fit of degree 3 (raw, adjusted):",c(loocvERR),"\n")
cat('RMSE On complete dataset:',RMSE(predict(modelLCV,data2), (data2$Height)),'\n\n')
modelkCV = glm(Height~poly(Parent,3),data=data2)
loocvERR = cv.glm(data2,modelLCV,K=5)$delta
cat("Seed",seed,"LOOCV error with polynomial fit of degree 3 (raw, adjusted):",c(loocvERR),"\n")
cat('RMSE On complete dataset:',RMSE(predict(modelkCV,data2), (data2$Height)),'\n\n')
modelLCV = glm(Height~poly(Parent,3),data=data2)
loocvERR = sqrt(cv.glm(data2,modelLCV)$delta)
cat("Seed",seed,"LOOCV error with polynomial fit of degree 3 (raw, adjusted):",c(loocvERR),"\n")
cat('RMSE On complete dataset:',RMSE(predict(modelLCV,data2), (data2$Height)),'\n\n')
modelkCV = glm(Height~poly(Parent,3),data=data2)
loocvERR = sqrt(cv.glm(data2,modelLCV,K=5)$delta)
cat("Seed",seed,"LOOCV error with polynomial fit of degree 3 (raw, adjusted):",c(loocvERR),"\n")
cat('RMSE On complete dataset:',RMSE(predict(modelkCV,data2), (data2$Height)),'\n\n')
seed=100
set.seed(seed)
splt = sample.split(data2$Height, SplitRatio = 0.7)
train = subset(data2, splt == TRUE)
test = subset(data2, splt == FALSE)
modelV = glm(Height~poly(Parent,3),data=train)
RMSE = RMSE(predict(modelV,test), test$Height)
cat('Validation Set RMSE:',RMSE,'\n')
cat('RMSE on complete dataset:',RMSE(predict(modelV,data2), (data2$Height)),'\n\n')
modelLCV = glm(Height~poly(Parent,3),data=data2)
loocvERR = sqrt(cv.glm(data2,modelLCV)$delta)
cat("Seed",seed,"LOOCV error with polynomial fit of degree 3 (raw, adjusted):",c(loocvERR),"\n")
cat('RMSE on complete dataset:',RMSE(predict(modelLCV,data2), (data2$Height)),'\n\n')
modelkCV = glm(Height~poly(Parent,3),data=data2)
loocvERR = sqrt(cv.glm(data2,modelLCV,K=5)$delta)
cat("Seed",seed,"LOOCV error with polynomial fit of degree 3 (raw, adjusted):",c(loocvERR),"\n")
cat('RMSE on complete dataset:',RMSE(predict(modelkCV,data2), (data2$Height)),'\n\n')
trainMethod <- trainControl(method = "LOOCV")
modelLCV = train(Height~poly(Parent,3), data = dat2,method = "lm",trControl = trainMethod)
trainMethod <- trainControl(method = "LOOCV")
modelLCV = train(Height~poly(Parent,3), data = data2,method = "lm",trControl = trainMethod)
loocvERR = sqrt(cv.glm(data2,modelLCV)$delta)
trainMethod <- trainControl(method = "LOOCV")
modelLCV = train(Height~poly(Parent,3), data = data2,method = "lm",trControl = trainMethod)
print(model)
loocvERR = sqrt(cv.glm(data2,modelLCV)$delta)
trainMethod <- trainControl(method = "LOOCV")
modelLCV = train(Height~poly(Parent,3), data = data2,method = "lm",trControl = trainMethod)
print(model)
#loocvERR = sqrt(cv.glm(data2,modelLCV)$delta)
#cat("Seed",seed,"LOOCV error with polynomial fit of degree 3 (raw, adjusted):",c(loocvERR),"\n")
#cat('RMSE on complete dataset:',RMSE(predict(modelLCV,data2), (data2$Height)),'\n\n')
trainMethod <- trainControl(method = "LOOCV")
modelLCV = train(Height~poly(Parent,3), data = data2,method = "lm",trControl = trainMethod)
print(model)
#loocvERR = sqrt(cv.glm(data2,modelLCV)$delta)
#cat("Seed",seed,"LOOCV error with polynomial fit of degree 3 (raw, adjusted):",c(loocvERR),"\n")
cat('RMSE on complete dataset:',RMSE(predict(modelLCV,data2), (data2$Height)),'\n\n')
trainMethod <- trainControl(method = "LOOCV")
modelLCV = train(Height~poly(Parent,3), data = data2,method = "lm",trControl = trainMethod)
print(model)
loocvERR = sqrt(cv.glm(data2,modelLCV)$delta)
trainMethod <- trainControl(method = "LOOCV")
modelLCV = train(Height~poly(Parent,3),form=y~poly(x,3), data = data2,method = "lm",trControl = trainMethod)
trainMethod <- trainControl(method = "LOOCV")
modelLCV = train(form=Height~poly(Parent,3), data = data2,method = "lm",trControl = trainMethod)
print(model)
loocvERR = sqrt(cv.glm(data2,modelLCV)$delta)
trainMethod <- trainControl(method = "LOOCV")
modelLCV = train(formula=Height~poly(Parent,3), data = data2,method = "lm",trControl = trainMethod)
trainMethod <- trainControl(method = "LOOCV")
modelLCV = train(form=Height~poly(Parent,3), data = data2,method = "lm",trControl = trainMethod)
print(model)
loocvERR = sqrt(cv.lm(data2,modelLCV)$delta)
trainMethod <- trainControl(method = "LOOCV")
modelLCV = train(form=Height~poly(Parent,3), data = data2,method = "glm",trControl = trainMethod)
print(model)
loocvERR = sqrt(cv.glm(data2,modelLCV)$delta)
trainMethod <- trainControl(method = "LOOCV")
modelLCV = train(form=Height~poly(Parent,3), data = data2,method = "glm",trControl = trainMethod)
print(model)
#loocvERR = sqrt(cv.glm(data2,modelLCV)$delta)
#cat("Seed",seed,"LOOCV error with polynomial fit of degree 3 (raw, adjusted):",c(loocvERR),"\n")
cat('RMSE on complete dataset:',RMSE(predict(modelLCV,data2), (data2$Height)),'\n\n')
#modelkCV = glm(Height~poly(Parent,3),data=data2)
trainMethod <- trainControl(method = "cv",number=5)
modelLCV = train(form=Height~poly(Parent,3), data = data2,method = "glm",trControl = trainMethod)
#loocvERR = sqrt(cv.glm(data2,modelLCV,K=5)$delta)
#cat("Seed",seed,"LOOCV error with polynomial fit of degree 3 (raw, adjusted):",c(loocvERR),"\n")
cat('RMSE on complete dataset:',RMSE(predict(modelkCV,data2), (data2$Height)),'\n\n')
trainMethod <- trainControl(method = "LOOCV")
modelLCV = train(form=Height~poly(Parent,3), data = data2,method = "glm",trControl = trainMethod)
#print(model)
#loocvERR = sqrt(cv.glm(data2,modelLCV)$delta)
#cat("Seed",seed,"LOOCV error with polynomial fit of degree 3 (raw, adjusted):",c(loocvERR),"\n")
cat('RMSE on complete dataset:',RMSE(predict(modelLCV,data2), (data2$Height)),'\n\n')
trainMethod <- trainControl(method = "LOOCV")
modelLCVT = train(form=Height~poly(Parent,3), data = data2,method = "glm",trControl = trainMethod)
loocvERR = modelLCVT$results
#Alternate
#loocvERR = sqrt(cv.glm(data2,modelLCV)$delta)
cat("Seed",seed,"LOOCV error with polynomial fit of degree 3 (raw, adjusted):",c(loocvERR),"\n")
trainMethod <- trainControl(method = "LOOCV")
modelLCVT = train(form=Height~poly(Parent,3), data = data2,method = "glm",trControl = trainMethod)
loocvERR = modelLCVT$results
loocvERR
#Alternate
#loocvERR = sqrt(cv.glm(data2,modelLCV)$delta)
#cat("Seed",seed,"LOOCV error with polynomial fit of degree 3 (raw, adjusted):",c(loocvERR),"\n")
cat('RMSE on complete dataset:',RMSE(predict(modelLCV,data2), (data2$Height)),'\n\n')
trainMethod <- trainControl(method = "LOOCV")
modelLCVT = train(form=Height~poly(Parent,3), data = data2,method = "glm",trControl = trainMethod)
loocvERR = modelLCVT$results[,2]
loocvERR
#Alternate
#loocvERR = sqrt(cv.glm(data2,modelLCV)$delta)
#cat("Seed",seed,"LOOCV error with polynomial fit of degree 3 (raw, adjusted):",c(loocvERR),"\n")
cat('RMSE on complete dataset:',RMSE(predict(modelLCV,data2), (data2$Height)),'\n\n')
trainMethod <- trainControl(method = "cv",number=5)
modelkCVT = train(form=Height~poly(Parent,3), data = data2,method = "glm",trControl = trainMethod)
kcvERR = modelkCVT$results[,2]
#Alternate
#modelkCV = glm(Height~poly(Parent,3),data=data2)
#loocvERR = sqrt(cv.glm(data2,modelLCV,K=5)$delta)
cat("Seed",seed,"5-fold CV error with polynomial fit of degree 3 (raw, adjusted):",c(kcvERR),"\n")
cat('RMSE on complete dataset:',RMSE(predict(modelkCV,data2), (data2$Height)),'\n\n')
trainMethod <- trainControl(method = "LOOCV")
modelLCVT = train(form=Height~poly(Parent,3), data = data2,method = "glm",trControl = trainMethod)
loocvERR = modelLCVT$results[,2]
#Alternate
#loocvERR = sqrt(cv.glm(data2,modelLCV)$delta)
cat("Seed",seed,"LOOCV error with polynomial fit of degree 3 (raw, adjusted):",c(loocvERR),"\n")
cat('RMSE on complete dataset:',RMSE(predict(modelLCV,data2), (data2$Height)),'\n\n')
X0 = 0.5*(data2$Mother + data2$Father)
Y0 = data2$Height
cat('Child Height (Y) vs Parent Height (X)\n')
model0=lm(Y~X0)
X0 = 0.5*(data2$Mother + data2$Father)
Y0 = data2$Height
cat('Child Height (Y) vs Parent Height (X)\n')
model0=lm(Y0~X0)
plot(X0,Y0)
abline(model0)
out=summary(model0)
out
cat('With 95% confidence, for an inch increase in average parent height, the child height increases about',out$coefficients[2,1],'+-',2*out$coefficients[2,2],'on average.\n')
RMSE=sqrt(sum(residuals(model0)^2) / df.residual(model0))
build_site()
blogdown::build_site()
load("C:/Users/sadam/Desktop/Webpage/Website/academic-kickstart/.RData")
clear
clear all
clean
